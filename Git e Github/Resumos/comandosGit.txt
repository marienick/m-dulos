Comandos Git
- Salvar a primeira versão de um projeto no Github:
git init
git add .
git commit -m "Mensagem explicativa"
git branch -M main
git remote add origin git@github.com:seuusuario/seurepositorio.git
git push -u origin main
- Salvar uma nova versão:
git status
git add .
git commit -m "Mensagem explicativa"
git push
- Clonar e Modificar um Projeto:
git clone git@github.com:seuusuario/seurepositorio.git
git add .
git commit "Mensagem explicativa"
git push
(Para baixar com os códigos de versões é necessário copiar o link do repositório)
- Entrar em subpastas:
cd "nomeDaPasta"
- Abrir o vscode pelo termital do git bash:
code .
- Verificando o histórico de versões
. git log
. Listagem resumida:
. git log --oneline
- git status
. Mostra oque foi alterado no seu projeto.
- clear
. Limpa o terminal
- git reset
. Volta todo mundo para o estado original, ele tira do stage
- git diff:
. Comando que mostra a diferença entre arquivos modificados, porém o vscode já mostra graficamente as diferenças.
- git checkout:
. Permite modificar temporariamente os arquivos do projeto ao estado de um dado commit ou branch.
. Código do commit, HEAD (último commit):
.. Cada commit possui um código, que pode ser utilizado para referenciar o commit.
.. O último commit do histórico do branch corrente também pode ser referenciado pela palavra HEAD.
.. É possível referenciar um commit N versões antes de HEAD usando ~N, por exemplo:
... HEAD~1(penúltimo commit)
... HEAD~2(antepenúltimo commit)
. IMPORTANTE: Antes de fazer o checkout para voltar para o HEAD, certifique-se que não haja mudanças nos arquivos.Se você acidentalmente mudou alguma coisa, desfaça as modificações usando:
git reset
git clean -df
git checkout -- .
- Oque fazer quando abre o editor VIM:
. Estas ações podem abrir o editor VIM no terminal:
.. Fazer commit sem mensagem.
.. Fazer um merge de três vias.
. Habilitar modo edição:
i
. Sair do VIM, salvando as alterações:
<Esc>
:wq
<Enter>
. Sair do VIM, descartando as alterações:
<Esc>
:q!
<Enter>
- Como desfazer o último commit sem desfazer as modificações nos arquivos:
git status
git reset --soft HEAD~1
(Assim é possível que você apague o ultimo commit para que você adicione algo que você esqueceu. Fazendo que não seja necessário você fazer um commit só para informação esquecida)
- Como deletar commits e também as modificações dos arquivos:
. Voltar o projeto ao estado de um dado commit (deletar commits e alterações posteriores desse commit):
git status 
git reset --hard <código do commit>
.. Recuperar oque já estava no repositório remoto:
git pull origin main
. Voltar o projeto ao estado do penúltimo commit:
git status
git reset --hard HEAD~1
ATENÇÃO: Ação destrutiva!!!
- Como atualizar o repositório local em relação ao remoto:
git status
git pull <nome do remote> <nome do branch>
* nome do remote = origin
* nome do branch = main 
- Como resolver push rejeitado:
. Não é permitido enviar um push se seu repositório local está atrasado em relação ao histórico do repositório remoto!
. Exemplo:
.. Quando você não tem todos os arquivos que estão no repositório remoto.
git pull origin main
(vai abrir o VIM)
i
(coloca a mensagem do commit atrasado)
(aperta esc)
:wq
(aperta Enter)
- Resolvendo Conflito:
. Ocorre um conflito quando você vai mesclar 2 históricos e esses históricos diferentes alteraram no mesmo arquivo.
.. Analiza o código fonte.
.. Faça as edições necessárias.
.. Faça um novo commit.
- Como sobrescrever um histórico no Github:
ATENÇÃO: Ação destrutiva!!
git push -f origin main
(ignora o mudança que não está salva na máquina e força que sua mudança prevaleça.)
- Como apontar o projeto para outro repositório remoto:
. 
git remote set-url origin git@github.com:seuusuario/seurepositorio.git